// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package vk

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_a4a3e1da_decode_github_com_iamsalnikov_socache_cleaners_vk_Answer(in *jlexer.Lexer, out *Answer) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			out.Response = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_a4a3e1da_encode_github_com_iamsalnikov_socache_cleaners_vk_Answer(out *jwriter.Writer, in Answer) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"response\":")
	out.Int(int(in.Response))
	out.RawByte('}')
}
func (v Answer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_a4a3e1da_encode_github_com_iamsalnikov_socache_cleaners_vk_Answer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Answer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_a4a3e1da_encode_github_com_iamsalnikov_socache_cleaners_vk_Answer(w, v)
}
func (v *Answer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_a4a3e1da_decode_github_com_iamsalnikov_socache_cleaners_vk_Answer(&r, v)
	return r.Error()
}
func (v *Answer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_a4a3e1da_decode_github_com_iamsalnikov_socache_cleaners_vk_Answer(l, v)
}
