// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package facebook

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_62b90ed5_decode_github_com_iamsalnikov_socache_cleaners_facebook_AnswerError(in *jlexer.Lexer, out *AnswerError) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "fbtrace_id":
			out.FbTraceID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_62b90ed5_encode_github_com_iamsalnikov_socache_cleaners_facebook_AnswerError(out *jwriter.Writer, in AnswerError) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"code\":")
	out.Int(int(in.Code))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fbtrace_id\":")
	out.String(string(in.FbTraceID))
	out.RawByte('}')
}
func (v AnswerError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_62b90ed5_encode_github_com_iamsalnikov_socache_cleaners_facebook_AnswerError(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v AnswerError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_62b90ed5_encode_github_com_iamsalnikov_socache_cleaners_facebook_AnswerError(w, v)
}
func (v *AnswerError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_62b90ed5_decode_github_com_iamsalnikov_socache_cleaners_facebook_AnswerError(&r, v)
	return r.Error()
}
func (v *AnswerError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_62b90ed5_decode_github_com_iamsalnikov_socache_cleaners_facebook_AnswerError(l, v)
}
